// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_vacancy_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpVacancyApiClient is the client API for OcpVacancyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpVacancyApiClient interface {
	// CreateVacancyV1 adds a Vacancy
	CreateVacancyV1(ctx context.Context, in *CreateVacancyV1Request, opts ...grpc.CallOption) (*CreateVacancyV1Response, error)
	// DescribeVacancyV1 returns a Vacancy by ID
	DescribeVacancyV1(ctx context.Context, in *DescribeVacancyV1Request, opts ...grpc.CallOption) (*DescribeVacancyV1Response, error)
	// ListVacanciesV1 returns all Vacancies
	ListVacanciesV1(ctx context.Context, in *ListVacanciesV1Request, opts ...grpc.CallOption) (*ListVacanciesV1Response, error)
	// RemoveVacancyV1 deletes a Vacancy by ID
	RemoveVacancyV1(ctx context.Context, in *RemoveVacancyV1Request, opts ...grpc.CallOption) (*RemoveVacancyV1Response, error)
}

type ocpVacancyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpVacancyApiClient(cc grpc.ClientConnInterface) OcpVacancyApiClient {
	return &ocpVacancyApiClient{cc}
}

func (c *ocpVacancyApiClient) CreateVacancyV1(ctx context.Context, in *CreateVacancyV1Request, opts ...grpc.CallOption) (*CreateVacancyV1Response, error) {
	out := new(CreateVacancyV1Response)
	err := c.cc.Invoke(ctx, "/ocp.vacancy.api.OcpVacancyApi/CreateVacancyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVacancyApiClient) DescribeVacancyV1(ctx context.Context, in *DescribeVacancyV1Request, opts ...grpc.CallOption) (*DescribeVacancyV1Response, error) {
	out := new(DescribeVacancyV1Response)
	err := c.cc.Invoke(ctx, "/ocp.vacancy.api.OcpVacancyApi/DescribeVacancyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVacancyApiClient) ListVacanciesV1(ctx context.Context, in *ListVacanciesV1Request, opts ...grpc.CallOption) (*ListVacanciesV1Response, error) {
	out := new(ListVacanciesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.vacancy.api.OcpVacancyApi/ListVacanciesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVacancyApiClient) RemoveVacancyV1(ctx context.Context, in *RemoveVacancyV1Request, opts ...grpc.CallOption) (*RemoveVacancyV1Response, error) {
	out := new(RemoveVacancyV1Response)
	err := c.cc.Invoke(ctx, "/ocp.vacancy.api.OcpVacancyApi/RemoveVacancyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpVacancyApiServer is the server API for OcpVacancyApi service.
// All implementations must embed UnimplementedOcpVacancyApiServer
// for forward compatibility
type OcpVacancyApiServer interface {
	// CreateVacancyV1 adds a Vacancy
	CreateVacancyV1(context.Context, *CreateVacancyV1Request) (*CreateVacancyV1Response, error)
	// DescribeVacancyV1 returns a Vacancy by ID
	DescribeVacancyV1(context.Context, *DescribeVacancyV1Request) (*DescribeVacancyV1Response, error)
	// ListVacanciesV1 returns all Vacancies
	ListVacanciesV1(context.Context, *ListVacanciesV1Request) (*ListVacanciesV1Response, error)
	// RemoveVacancyV1 deletes a Vacancy by ID
	RemoveVacancyV1(context.Context, *RemoveVacancyV1Request) (*RemoveVacancyV1Response, error)
	mustEmbedUnimplementedOcpVacancyApiServer()
}

// UnimplementedOcpVacancyApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpVacancyApiServer struct {
}

func (UnimplementedOcpVacancyApiServer) CreateVacancyV1(context.Context, *CreateVacancyV1Request) (*CreateVacancyV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVacancyV1 not implemented")
}
func (UnimplementedOcpVacancyApiServer) DescribeVacancyV1(context.Context, *DescribeVacancyV1Request) (*DescribeVacancyV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVacancyV1 not implemented")
}
func (UnimplementedOcpVacancyApiServer) ListVacanciesV1(context.Context, *ListVacanciesV1Request) (*ListVacanciesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVacanciesV1 not implemented")
}
func (UnimplementedOcpVacancyApiServer) RemoveVacancyV1(context.Context, *RemoveVacancyV1Request) (*RemoveVacancyV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVacancyV1 not implemented")
}
func (UnimplementedOcpVacancyApiServer) mustEmbedUnimplementedOcpVacancyApiServer() {}

// UnsafeOcpVacancyApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpVacancyApiServer will
// result in compilation errors.
type UnsafeOcpVacancyApiServer interface {
	mustEmbedUnimplementedOcpVacancyApiServer()
}

func RegisterOcpVacancyApiServer(s grpc.ServiceRegistrar, srv OcpVacancyApiServer) {
	s.RegisterService(&OcpVacancyApi_ServiceDesc, srv)
}

func _OcpVacancyApi_CreateVacancyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVacancyV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVacancyApiServer).CreateVacancyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.vacancy.api.OcpVacancyApi/CreateVacancyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVacancyApiServer).CreateVacancyV1(ctx, req.(*CreateVacancyV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVacancyApi_DescribeVacancyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVacancyV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVacancyApiServer).DescribeVacancyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.vacancy.api.OcpVacancyApi/DescribeVacancyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVacancyApiServer).DescribeVacancyV1(ctx, req.(*DescribeVacancyV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVacancyApi_ListVacanciesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVacanciesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVacancyApiServer).ListVacanciesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.vacancy.api.OcpVacancyApi/ListVacanciesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVacancyApiServer).ListVacanciesV1(ctx, req.(*ListVacanciesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVacancyApi_RemoveVacancyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVacancyV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVacancyApiServer).RemoveVacancyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.vacancy.api.OcpVacancyApi/RemoveVacancyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVacancyApiServer).RemoveVacancyV1(ctx, req.(*RemoveVacancyV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpVacancyApi_ServiceDesc is the grpc.ServiceDesc for OcpVacancyApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpVacancyApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.vacancy.api.OcpVacancyApi",
	HandlerType: (*OcpVacancyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVacancyV1",
			Handler:    _OcpVacancyApi_CreateVacancyV1_Handler,
		},
		{
			MethodName: "DescribeVacancyV1",
			Handler:    _OcpVacancyApi_DescribeVacancyV1_Handler,
		},
		{
			MethodName: "ListVacanciesV1",
			Handler:    _OcpVacancyApi_ListVacanciesV1_Handler,
		},
		{
			MethodName: "RemoveVacancyV1",
			Handler:    _OcpVacancyApi_RemoveVacancyV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-vacancy-api/ocp-vacancy-api.proto",
}
